// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/locations": {
            "post": {
                "description": "Insert location data into database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Locations"
                ],
                "summary": "Insert location data",
                "parameters": [
                    {
                        "description": "Request of creating location object",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.LocationInApp"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "document created",
                        "schema": {
                            "$ref": "#/definitions/dto.LocationCreatedResponseOut"
                        }
                    },
                    "400": {
                        "description": "validation error",
                        "schema": {
                            "$ref": "#/definitions/handler.GlobalErrorHandlerResp"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "$ref": "#/definitions/handler.GlobalErrorHandlerResp"
                        }
                    }
                }
            }
        },
        "/api/v1/locations/{id}": {
            "get": {
                "description": "Get location data from database based on a document_id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Locations"
                ],
                "summary": "Get location data",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id from document",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "located document",
                        "schema": {
                            "$ref": "#/definitions/dto.LocationOutApp"
                        }
                    },
                    "404": {
                        "description": "document not found",
                        "schema": {
                            "$ref": "#/definitions/dto.DefaultResponseMessageOut"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "$ref": "#/definitions/handler.GlobalErrorHandlerResp"
                        }
                    }
                }
            },
            "put": {
                "description": "Update location data into database based on a document_id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Locations"
                ],
                "summary": "Update location data",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id from document",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Request of updating location object",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.LocationInApp"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "updated document",
                        "schema": {
                            "$ref": "#/definitions/dto.DefaultResponseMessageOut"
                        }
                    },
                    "400": {
                        "description": "validation error",
                        "schema": {
                            "$ref": "#/definitions/handler.GlobalErrorHandlerResp"
                        }
                    },
                    "404": {
                        "description": "document not found",
                        "schema": {
                            "$ref": "#/definitions/dto.DefaultResponseMessageOut"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "$ref": "#/definitions/handler.GlobalErrorHandlerResp"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete location data from database based on a document_id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Locations"
                ],
                "summary": "Delete location data",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id from document",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "deleted document",
                        "schema": {
                            "$ref": "#/definitions/dto.DefaultResponseMessageOut"
                        }
                    },
                    "404": {
                        "description": "document not found",
                        "schema": {
                            "$ref": "#/definitions/dto.DefaultResponseMessageOut"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "$ref": "#/definitions/handler.GlobalErrorHandlerResp"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.CoordinatesOutApp": {
            "type": "object",
            "properties": {
                "latitude": {
                    "type": "string"
                },
                "longitude": {
                    "type": "string"
                }
            }
        },
        "dto.DefaultResponseMessageOut": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "dto.LocationCreatedResponseOut": {
            "type": "object",
            "properties": {
                "document_id": {
                    "type": "string"
                }
            }
        },
        "dto.LocationInApp": {
            "type": "object",
            "required": [
                "latitude",
                "longitude",
                "status",
                "vehicle_id"
            ],
            "properties": {
                "latitude": {
                    "type": "string",
                    "example": "-23.55052"
                },
                "longitude": {
                    "type": "string",
                    "example": "-46.633308"
                },
                "speed": {
                    "type": "integer",
                    "minimum": 0,
                    "example": 80
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "moving",
                        "stopped",
                        "offline"
                    ],
                    "example": "moving"
                },
                "vehicle_id": {
                    "type": "string",
                    "example": "ABC1234"
                }
            }
        },
        "dto.LocationOutApp": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "location": {
                    "$ref": "#/definitions/dto.CoordinatesOutApp"
                },
                "speed": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                },
                "vehicle_id": {
                    "type": "string"
                }
            }
        },
        "handler.GlobalErrorHandlerResp": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "Location API",
	Description:      "API to manage locations from vehicles",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
